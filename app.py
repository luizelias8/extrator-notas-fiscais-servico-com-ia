import os
import base64
import json
import pandas as pd
from dotenv import load_dotenv
import ast
import fitz  # PyMuPDF
import streamlit as st
import tempfile
from openai import OpenAI
from datetime import datetime

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title='Extrator de Notas Fiscais de Servi√ßo',
    page_icon='üìä',
    layout='wide'
)

# Carrega as vari√°veis de ambiente
load_dotenv()

# Fun√ß√£o para codificar uma imagem no formato Base64
def codificar_imagem(caminho_imagem):
    """Codifica uma imagem em base64."""
    try:
        with open(caminho_imagem, 'rb') as imagem:
            return base64.b64encode(imagem.read()).decode('utf-8')
    except Exception as erro:
        st.error(f'Erro ao codificar imagem {caminho_imagem}: {str(erro)}')
        return None

# Fun√ß√£o para extrair informa√ß√µes da NFS-e
def extrair_informacoes_nfse(imagem_base64):
    """Envia a imagem para o modelo GPT e extrai as informa√ß√µes da NFS-e."""
    prompt_texto = """
    OBJETIVO: Analisar uma imagem e determinar se √© uma Nota Fiscal de Servi√ßo Eletr√¥nica (NFS-e) brasileira v√°lida.

    CRIT√âRIOS DE VALIDA√á√ÉO:
    - A imagem deve conter elementos claros de uma nota fiscal de servi√ßo
    - Deve haver informa√ß√µes de CNPJ do prestador
    - Deve conter n√∫mero da nota fiscal
    - Deve ter data de emiss√£o leg√≠vel
    - Deve apresentar valor total do servi√ßo
    - Deve ter uma descri√ß√£o/discrimina√ß√£o de servi√ßo

    SE A IMAGEM FOR UMA NFS-e V√ÅLIDA:
    Extraia as seguintes informa√ß√µes espec√≠ficas:

    1. CNPJ do prestador de servi√ßos
    2. Nome/Raz√£o Social do prestador de servi√ßos
    3. CNPJ do tomador de servi√ßos
    4. Nome/Raz√£o Social do tomador de servi√ßos
    5. N√∫mero da nota fiscal
    6. Data de emiss√£o
    7. Valor total do servi√ßo
    8. Discrimina√ß√£o do servi√ßo prestado (descri√ß√£o do servi√ßo)
    9. Valores de impostos (IR, PIS, COFINS, CSLL, INSS e ISS)
    10. Valor aproximado dos tributos

    REGRAS PARA EXTRA√á√ÉO:
    - Extraia os n√∫meros de CNPJ com todos os caracteres, incluindo pontos, barras e h√≠fens (formato: 00.000.000/0000-00)
    - Extraia a data no formato DD/MM/AAAA
    - Extraia o valor total, valores de impostos e valor aproximado dos tributos como n√∫meros decimais (com ponto como separador decimal)
    - Para a discrimina√ß√£o do servi√ßo, busque se√ß√µes com t√≠tulos como "DISCRIMINA√á√ÉO DOS SERVI√áOS", "DESCRI√á√ÉO DO SERVI√áO", "DISCRIMINA√á√ÉO DO SERVI√áO" ou equivalentes
    - Se houver um c√≥digo de servi√ßo antes da descri√ß√£o (como "01.01.01 - An√°lise e desenvolvimento de sistemas"), inclua-o na discrimina√ß√£o do servi√ßo exatamente como aparece na nota
    - Capture a descri√ß√£o completa do servi√ßo, incluindo o c√≥digo quando dispon√≠vel, no formato "C√ìDIGO - DESCRI√á√ÉO" (exemplo: "01.01.01 - An√°lise e desenvolvimento de sistemas")
    - Busque valores de impostos em se√ß√µes como "RETEN√á√ïES FEDERAIS", "IMPOSTOS RETIDOS", "VALORES DE IMPOSTOS" ou similares
    - Para o valor aproximado dos tributos, busque campos como "VALOR APROXIMADO DOS TRIBUTOS", "VALOR APROXIMADO TRIBUTOS", "IBPT" ou similares (exemplo: "R$ 1.880,00 (17,65%) / IBPT")
    - Extraia apenas o valor num√©rico do "Valor aproximado dos tributos", ignorando percentuais e textos adicionais

    SE N√ÉO FOR UMA NFS-e V√ÅLIDA:
    - Retorne um JSON com TODOS os valores como null

    FORMATO DE RETORNO (OBRIGAT√ìRIO):
    {
        "cnpj_prestador": "00.000.000/0000-00" ou null,
        "nome_prestador": "Nome da Empresa Prestadora" ou null,
        "cnpj_tomador": "00.000.000/0000-00" ou null,
        "nome_tomador": "Nome da Empresa Tomadora" ou null,
        "numero_nota": "000000000" ou null,
        "data_emissao": "DD/MM/AAAA" ou null,
        "valor_total": "0.00" ou null,
        "discriminacao_servico": "C√≥digo - Descri√ß√£o do servi√ßo prestado" ou null,
        "ir": "0.00" ou null,
        "pis": "0.00" ou null,
        "cofins": "0.00" ou null,
        "csll": "0.00" ou null,
        "inss": "0.00" ou null,
        "iss": "0.00" ou null,
        "valor_aproximado_tributos": "0.00" ou null
    }

    REGRAS ADICIONAIS:
    - Se valores de impostos n√£o estiverem presentes ou leg√≠veis, defina-os como null
    - Se houver mais de um valor para o mesmo campo, escolha o mais completo e leg√≠vel
    - Se a imagem N√ÉO for uma nota fiscal v√°lida, TODOS os campos devem ser null

    Responda APENAS com o JSON, sem texto adicional.
    """

    try:
        # Criar cliente OpenAI com a chave de API fornecida
        cliente = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

        resposta = cliente.chat.completions.create(
            model='gpt-4o-mini',
            messages=[{
                'role': 'user',
                'content': [
                    {'type': 'text', 'text': prompt_texto},
                    {'type': 'image_url', 'image_url': {'url': f'data:image/jpeg;base64,{imagem_base64}'}}
                ]
            }],
            max_tokens=1000
        )

        # Extrair apenas o JSON da resposta
        texto_resposta = resposta.choices[0].message.content.strip()

        # Remover qualquer formata√ß√£o de markdown (` ```json ... ``` `)
        texto_resposta = texto_resposta.replace("```json", "").replace("```", "").strip()

        # Tentar encontrar um JSON v√°lido na resposta
        try:
            # Se o texto j√° for um JSON limpo
            dados = json.loads(texto_resposta)
            return dados
        except json.JSONDecodeError:
            # Se falhar com json.loads, tentamos com ast.literal_eval
            try:
                dados = ast.literal_eval(texto_resposta)
                return dados
            except Exception as erro:
                st.error(f'Erro ao extrair dados da resposta: {str(erro)}')
                return None

    except Exception as erro:
        st.error(f'Erro ao processar imagem: {str(erro)}')
        return None

# Fun√ß√£o para converter todas as p√°ginas de um PDF para imagens
def converter_pdf_para_imagens(caminho_pdf, pasta_imagens):
    """Converte todas as p√°ginas de um PDF em imagens separadas e retorna a lista de caminhos."""
    try:
        # Verificar se a pasta de imagens existe, se n√£o, criar
        if not os.path.exists(pasta_imagens):
            os.makedirs(pasta_imagens)

        # Gerar nome base do arquivo baseado no nome do PDF original
        nome_base = os.path.splitext(os.path.basename(caminho_pdf))[0]
        caminhos_imagens = []

        # Abrir o PDF com PyMuPDF
        doc = fitz.open(caminho_pdf)

        # Verificar se o documento tem p√°ginas
        if doc.page_count == 0:
            return []

        # Processar cada p√°gina do PDF
        for num_pagina in range(doc.page_count):
            # Gerar nome √∫nico para cada p√°gina
            caminho_img = os.path.join(pasta_imagens, f'{nome_base}_pagina_{num_pagina+1}.jpg')

            # Carregar a p√°gina
            pagina = doc.load_page(num_pagina)

            # Definir matriz de transforma√ß√£o para aumentar a resolu√ß√£o (300 DPI)
            matriz = fitz.Matrix(3, 3)

            # Renderizar a p√°gina para um objeto pixmap (sem canal alpha para reduzir tamanho)
            pix = pagina.get_pixmap(matrix=matriz, alpha=False)

            # Salvar a imagem como JPEG
            pix.save(caminho_img, 'jpeg')

            # Adicionar caminho da imagem √† lista
            caminhos_imagens.append(caminho_img)

        # Fechar o documento para liberar recursos
        doc.close()

        return caminhos_imagens
    except Exception as erro:
        st.error(f'Erro ao converter PDF para imagens: {str(erro)}')
        return []

def processar_arquivo(arquivo, pasta_temp, pasta_imagens):
    """Processa um √∫nico arquivo (PDF ou imagem) e retorna os dados extra√≠dos."""
    resultados = []

    try:
        # Salvar o arquivo temporariamente
        caminho_arquivo = os.path.join(pasta_temp, arquivo.name)
        with open(caminho_arquivo, 'wb') as f:
            f.write(arquivo.getbuffer())

        # Verificar se √© um PDF ou uma imagem
        if arquivo.name.lower().endswith('.pdf'):
            # Converter todas as p√°ginas do PDF para imagens
            caminhos_imagens = converter_pdf_para_imagens(caminho_arquivo, pasta_imagens)

            if not caminhos_imagens:
                st.warning(f'N√£o foi poss√≠vel extrair imagens do PDF: {arquivo.name}')
                return []

            # Status para p√°ginas individuais
            status_paginas = st.empty()

            # Processar cada p√°gina do PDF
            for i, caminho_img in enumerate(caminhos_imagens):
                status_paginas.text(f'Processando p√°gina {i+1}/{len(caminhos_imagens)} do arquivo {arquivo.name}')

                # Codificar imagem em base64
                imagem_base64 = codificar_imagem(caminho_img)

                if not imagem_base64:
                    continue

                # Extrair informa√ß√µes
                dados = extrair_informacoes_nfse(imagem_base64)

                # Filtrar apenas notas fiscais v√°lidas (com pelo menos um campo preenchido)
                if dados and any(valor is not None for valor in dados.values()):
                    # Adicionar informa√ß√µes sobre o arquivo e p√°gina
                    dados['nome_arquivo'] = arquivo.name
                    dados['pagina'] = i + 1
                    resultados.append(dados)
                else:
                    st.warning(f'Imagem na p√°gina {i + 1} do arquivo {arquivo.name} n√£o parece ser uma nota fiscal v√°lida')

            # Limpar status de p√°ginas
            status_paginas.empty()

        else: # Arquivo de imagem
            # Codificar imagem em base64 diretamente
            imagem_base64 = codificar_imagem(caminho_arquivo)

            if not imagem_base64:
                return []

            # Extrair informa√ß√µes
            dados = extrair_informacoes_nfse(imagem_base64)
            if dados:
                dados['nome_arquivo'] = arquivo.name
                dados['pagina'] = 1
                resultados.append(dados)

        return resultados
    except Exception as erro:
        st.error(f'Erro ao processar arquivo {arquivo.name}: {str(erro)}')
        return []

# Fun√ß√£o para gerar link de download
def get_download_link(df, nome_arquivo, texto):
    """Gera um link para download do DataFrame como CSV."""
    csv = df.to_csv(index=False, sep=';', encoding='utf-8-sig')
    b64 = base64.b64encode(csv.encode('utf-8-sig')).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{nome_arquivo}">{texto}</a>'
    return href

# Fun√ß√£o para formatar valores no padr√£o brasileiro
def formatar_valor_br(valor):
    """Converte um valor num√©rico para formato de moeda brasileiro."""
    if valor is None or valor == '':
        return ''

    # Tenta converter para float, tratando diferentes formatos
    try:
        # Se o valor j√° vier como string com v√≠rgula decimal
        if isinstance(valor, str) and ',' in valor:
            valor = valor.replace('.', '').replace(',', '.')

        valor_float = float(valor)
        # Formata para o padr√£o brasileiro: 1.234,56
        return f'{valor_float:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.')
    except:
        return valor # Retorna o valor original em caso de erro

# Fun√ß√£o principal da aplica√ß√£o Streamlit
def main():
    st.title('Extrator de Notas Fiscais de Servi√ßo (NFS-e)')

    # Criar diret√≥rios tempor√°rios para trabalhar
    with tempfile.TemporaryDirectory() as temp_dir:
        # Criar subpastas
        pasta_imagens = os.path.join(temp_dir, 'imagens_processadas')
        if not os.path.exists(pasta_imagens):
            os.makedirs(pasta_imagens)

        # Upload de arquivos
        st.subheader('Upload de Arquivos')
        st.write('Fa√ßa upload dos PDFs ou imagens de notas fiscais de servi√ßo.')

        arquivos = st.file_uploader(
            'Arraste e solte arquivos aqui ou clique para selecionar',
            type=['pdf', 'jpg', 'jpeg', 'png'],
            accept_multiple_files=True
        )

        # Inicializar vari√°veis
        todos_resultados = []
        df_resultados = None

        # Bot√£o para processar os arquivos
        if arquivos and st.button('Processar Arquivos'):
            # Exibir barra de progresso
            progresso = st.progress(0)
            texto_status = st.empty()

            # Processar cada arquivo
            total_arquivos = len(arquivos)
            total_processados = 0
            total_notas = 0

            for i, arquivo in enumerate(arquivos):
                texto_status.text(f'Processando {i+1}/{total_arquivos}: {arquivo.name}')
                progresso.progress((i) / total_arquivos)

                resultados_arquivo = processar_arquivo(arquivo, temp_dir, pasta_imagens)

                if resultados_arquivo:
                    todos_resultados.extend(resultados_arquivo)
                    total_notas += len(resultados_arquivo)
                    total_processados += 1
                    st.success(f'‚úÖ {arquivo.name}: {len(resultados_arquivo)} notas fiscais extra√≠das com sucesso')
                else:
                    st.error(f'‚ùå Falha ao processar {arquivo.name}')

            # Atualizar progresso final
            progresso.progress(1.0)
            texto_status.text(f'Processamento conclu√≠do. {total_processados} de {total_arquivos} arquivos processados com sucesso, totalizando {total_notas} notas fiscais extra√≠das.')

            # Criar DataFrame e exibir resultados se houver
            if todos_resultados:
                df_resultados = pd.DataFrame(todos_resultados)

                # Antes de exibir, formatar valores monet√°rios no padr√£o brasileiro
                if 'valor_total' in df_resultados.columns:
                    # Cria uma c√≥pia do valor para exibi√ß√£o no DataFrame
                    df_exibicao = df_resultados.copy()
                    df_exibicao['valor_total'] = df_exibicao['valor_total'].apply(formatar_valor_br)
                    # Formatar campos de impostos
                    for campo in ['pis', 'cofins', 'ir', 'csll', 'inss', 'iss', 'valor_aproximado_tributos']:
                        if campo in df_exibicao.columns:
                            df_exibicao[campo] = df_exibicao[campo].apply(formatar_valor_br)

                    st.subheader('Resultados Extra√≠dos')
                    st.dataframe(df_exibicao)
                else:
                    st.subheader('Resultados Extra√≠dos')
                    st.dataframe(df_resultados)

                # Para o CSV, formatar os valores monet√°rios
                # (criamos uma c√≥pia para n√£o afetar o JSON)
                df_csv = df_resultados.copy()
                if 'valor_total' in df_csv.columns:
                    df_csv['valor_total'] = df_csv['valor_total'].apply(formatar_valor_br)
                    # Formatar campos de impostos
                    for campo in ['pis', 'cofins', 'ir', 'csll', 'inss', 'iss', 'valor_aproximado_tributos']:
                        if campo in df_csv.columns:
                            df_csv[campo] = df_csv[campo].apply(formatar_valor_br)

                # Bot√£o para download do CSV
                csv = df_csv.to_csv(index=False, sep=';', encoding='utf-8-sig').encode('utf-8-sig')
                timestamp = datetime.now().strftime('%d%m%Y_%H%M%S')
                st.download_button(
                    label='Baixar Resultados (CSV)',
                    data=csv,
                    file_name=f'resultados_nfse_{timestamp}.csv',
                    mime='text/csv'
                )

                # Bot√£o para download do JSON
                json_str = json.dumps(todos_resultados, ensure_ascii=False, indent=4)
                st.download_button(
                    label='Baixar Resultados (JSON)',
                    data=json_str.encode('utf-8'),
                    file_name=f'resultados_nfse_{timestamp}.json',
                    mime='application/json'
                )
            else:
                st.warning('N√£o foi poss√≠vel extrair informa√ß√µes dos arquivos.')

        # Exibir instru√ß√µes
        with st.expander('Instru√ß√µes de Uso'):
            st.markdown("""
            ### Como usar o Extrator de NFS-e

            1. **Fa√ßa upload dos arquivos** de notas fiscais (PDF, JPG, PNG).
            2. Clique no bot√£o **Processar Arquivos**.
            3. Aguarde o processamento - voc√™ ver√° o progresso na barra.
            4. Visualize os resultados na tabela.
            5. **Baixe os resultados** em formato CSV ou JSON.

            ### Informa√ß√µes extra√≠das

            - CNPJ do prestador
            - Nome do prestador
            - CNPJ do tomador
            - Nome do tomador
            - N√∫mero da nota fiscal
            - Data de emiss√£o
            - Valor total
            - Discrimina√ß√£o do servi√ßo prestado

            ### Observa√ß√µes

            - A qualidade da extra√ß√£o depende da qualidade das imagens
            - Diferentes formatos de NFS-e podem ter resultados variados
            - O processamento utiliza a API da OpenAI (modelo GPT-4o-mini)
            """)

if __name__ == '__main__':
    main()
